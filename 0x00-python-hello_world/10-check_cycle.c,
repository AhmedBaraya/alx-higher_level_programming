#include <stdio.h>
#include <stdlib.h>

/**
 * struct listint_s - singly linked list
 * @n: integer
 * @next: points to the next node
 *
 * Description: singly linked list node structure
 * for Holberton project
 */
typedef struct listint_s
{
    int n;
    struct listint_s *next;
} listint_t;

/**
 * check_cycle - checks if a singly linked list has a cycle in it
 * @list: pointer to the head of the linked list
 * Return: 0 if there is no cycle, 1 if there is a cycle
 */
int check_cycle(listint_t *list)
{
    listint_t *slow = list, *fast = list;

    while (fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast)
            return 1;
    }

    return 0;
}

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
    listint_t *head, *second, *third;

    head = malloc(sizeof(listint_t));
    second = malloc(sizeof(listint_t));
    third = malloc(sizeof(listint_t));

    head->n = 1;
    head->next = second;
    second->n = 2;
    second->next = third;
    third->n = 3;
    third->next = head; /* Create a cycle */

    if (check_cycle(head))
        printf("Cycle found\n");
    else
        printf("No cycle found\n");

    free(head);
    free(second);
    free(third);
    return (0);
}
